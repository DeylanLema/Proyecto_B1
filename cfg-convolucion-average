#define tam_sig 600 //tamano de la señal cardiaca
#define tam_imp 21//tamaño de filtro FIR
extern int ecg_100Hz [tam_sig];//Traer una pestaña
extern int Impulse_response[tam_imp];//Traer una pestaña
double output[tam_sig+tam_imp];//salida de nuestras señales - convolucion
double output_signal[tam_sig];//salida de nuestras señales - average

int i;//variable for
int j;//variable for
int digi_conv;//variable para mapeo de datos
int digi_conv1;//variable para mapeo de datos
int digi_conv2;//variable para mapeo de datos
void convolucion(int *sig_in,int *sig_out, int *imp, int sig_tam, int imp_tam);//declaracion a metodo convolucion
void moving_average(int *sig_in, int *output_signal, int sig_tam, int filter);//declaracion a metodo average
void setup() {
}

void loop() {


  convolucion((int *)&ecg_100Hz[0],(int *)& output[0],(int *)&Impulse_response[0],//inicializacion de metodo convolucion
              (int) tam_sig,(int) tam_imp);
 moving_average((int *)&ecg_100Hz[0],(int *)& output_signal[0],(int) tam_sig,11); //inicializacion de metodo average
 int i;          
for(i=0;i<tam_sig;i++){//ciclo for para mapeo de datos y remplazo en las salidas de cada señal
digi_conv=map(ecg_100Hz[i],0,980,0,255);//conversion de datos
digi_conv1=map(output_signal[i],0,980,0,255);//conversion de datos
digi_conv2=map(output[i],0,980,0,255);//conversion de datos
analogWrite(6,digi_conv);//grafica de nuestra señal en puerto 6
analogWrite(5,digi_conv1);//grafica de nuestra señal en puerto 5
analogWrite(3,digi_conv2);//grafica de nuestra señal en puerto 3
delay(10);
}
}
/////////////FILTRO FIR - CONVOLUCION///////////////////////////
void convolucion(int *sig_in,int *sig_out, int *imp, int sig_tam, int imp_tam){
int i,j;
for(i=0;i<(sig_tam+imp_tam);i++){
  sig_out[i]=0;
}
for(i=0;i<sig_tam;i++){
  for(j=0;j<imp_tam;j++){
    sig_out[i+j]=sig_out[i+j]+sig_in[i]*imp[j];
    }
  }
}
///////////SUAVIZADO DE SEÑAL - AVERAGE /////////////////////////
void moving_average(int *sig_in,int *outpu_signal, int sig_tam, int filter){
  int i,j;
  for(i=floor(filter/2);i<sig_tam-floor(filter/2)-1;i++){
    output_signal[i]=0;
  
    for(j=-floor(filter/2);j<floor(filter/2);j++){
      output_signal[i]=output_signal[i]+sig_in[i+j];
    }
    output_signal[i]=output_signal[i]/filter;
  
  }
 }
